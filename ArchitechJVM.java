package firstproject;

public class ArchitechJVM {

	public static void main(String[] args) {
		//  Fifteen sentence to describe architecture of JVM
		System.out.println("The JVM acts as a runtime engine for java applications");
		System.out.println("The JVM is an integral part of the Java Runtime Environment (JRE)");
		System.out.println("JVM stands for Java Virtual Machine");
		System.out.println("JVM's ability to Java code across diffrent platforms ");
		System.out.println("JVM Stores information about loaded classes, including their fully qualified names, parent classes,");
		System.out.println("The class loader reads the .class files (containing bytecode) generated by the Java compiler");
		System.out.println("Each loaded .class file corresponds to a single object in the method area");
		System.out.println("The heap is where objects and their instance variables are allocated during runtime");
		System.out.println("JVM's each thread has its own stack memory");
		System.out.println("JVM Stores method call frames, local variables, and operand stacks");
		System.out.println("PC Register keeps track of the currently executing instruction");
		System.out.println("PC Register ensures proper flow control during method invocation");
		System.out.println("Native Method Stack Contains native method information (methods written in languages other than Java");
		System.out.println("Native Method Stack interacts with native libraries");
		System.out.println("JVM compile and Interpret the Java Program");
	}

}
